from snakemake.utils import min_version

min_version("7.17.1")


configfile: "config/config.yaml"


include: "rules/common.smk"
include: "rules/utils.smk"
include: "rules/download.smk"


if "variant-calls" in config:

    include: "rules/eval.smk"

    rule all:
        input:
            expand(
                "results/report/precision-recall/{benchmark}/{vartype}",
                benchmark=used_benchmarks,
                vartype=["snvs", "indels"],
            ),
            expand(
                "results/report/fp-fn/callsets/{callset}/{classification}",
                callset=used_callsets,
                classification=["fp", "fn"],
            ),
            get_fp_fn_reports,
            expand(
                "results/fp-fn/benchmarks/{benchmark}.shared.fn.tsv",
                benchmark=used_benchmarks,
            ),
            expand(
                "results/fp-fn/vcf/{benchmark}.shared-fn.vcf.gz",
                benchmark=used_benchmarks,
            ),
            expand(
                "results/fp-fn/vcf/{benchmark}/{callset}.unique-fn.vcf.gz",
                benchmark=used_benchmarks,
                callset=used_callsets,
            ),
            # expand(
            #     "results/fp-fn/vcf/{benchmark}/{callset}.unique-fp.vcf.gz",
            #     benchmark=used_benchmarks,
            #     callset=used_callsets,
            # ),

    rule eval:
        input:
            expand(
                "results/report/precision-recall/{benchmark}/{vartype}",
                benchmark=used_benchmarks,
                vartype=["snvs", "indels"],
            ),
            expand(
                "results/report/fp-fn/callsets/{callset}/{classification}",
                callset=used_callsets,
                classification=["fp", "fn"],
            ),
            expand(
                "results/fp-fn/{benchmark}.{classification}.tsv",
                benchmark=used_benchmarks,
                classification=["fp", "fn"],
            ),
            get_fp_fn_reports,
            # collect the checkpoint inputs to avoid issues when
            # --all-temp is used: --all-temp leads to premature deletion
            # of the checkpoint output
            expand(
                "results/variants/{benchmark}.truth.cov-{cov}.stats.json",
                benchmark=[
                    benchmark
                    for benchmark in used_benchmarks
                    if benchmarks[benchmark].get("high-coverage")
                ],
                cov=high_coverages,
            ),
            expand(
                "results/variants/{benchmark}.truth.cov-{cov}.stats.json",
                benchmark=[
                    benchmark
                    for benchmark in used_benchmarks
                    if not benchmarks[benchmark].get("high-coverage")
                ],
                cov=low_coverages,
            ),
